
plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'

    id "org.jetbrains.kotlin.jvm" version "2.1.0"

    id "com.github.johnrengelman.shadow" version "8.1.1"
    // id "com.gradleup.shadow" version "8.3.0"
    id 'org.spongepowered.mixin' version '0.7.+'

    id 'org.parchmentmc.librarian.forgegradle' version '1.+'

}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"



minecraft {

    mappings channel: mapping_channel, version: mapping_version
    // mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '-mixin.config=mixins.controlcraft.json'
            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {

            workingDirectory project.file('run')
            //jvmArg "-XX:+AllowEnhancedClassRedefinition"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }



repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    flatDir {
         dirs 'libs'
    }
    maven { url = 'https://maven.minecraftforge.net' }
    maven{url = "https://repo.essential.gg/repository/maven-public"}
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }

    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }

    maven { url 'https://maven.valkyrienskies.org/' }

    maven { url 'https://maven.fabricmc.net/' }

    maven {
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup("maven.modrinth")
        }
    }
    // Add KFF Maven repository
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url = "https://maven.saps.dev/minecraft" }

    repositories {
        maven { url = "https://maven.bawnorton.com/releases" }
    }

    maven { // Ritchie's Projectile Library
        url = "https://maven.realrobotix.me/master/"
        content {
            includeGroup("com.rbasamoyai")
        }
    }
    gradlePluginPortal()
    mavenCentral()
}

mixin {
    add sourceSets.main, "mixins.controlcraft.refmap.json"
    config 'mixins.controlcraft.json'
}

/*
implementation(jarJar("gg.essential:elementa:$elementaVersion")) {
        //transitive = false
        jarJar.ranged(it, "[$elementaVersion,)")
    }

    implementation(jarJar("gg.essential:universalcraft-1.20.1-forge:$ucVersion")){
        //transitive = false
        jarJar.ranged(it, "[$ucVersion,)")
    }
* */

configurations {
    common
    shadowInclude // 独立配置
    implementation.extendsFrom(shadowInclude)  // 开发环境可见
    // shadowInclude.extendsFrom()
}
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    // compileOnly("maven.modrinth:embeddium:${embeddium_version}")

    runtimeOnly fg.deobf("libs:architectury-forge:9.2.14")

    // implementation fg.deobf("org.valkyrienskies.core:api:${vs_core_version}")
    implementation fg.deobf("org.valkyrienskies:valkyrienskies-120-forge:${vs2_mod_version}")
    compileOnly("org.valkyrienskies.core:api:${vs_core_version}")
    compileOnly("org.valkyrienskies.core:api-game:${vs_core_version}")
    compileOnly("org.valkyrienskies.core:util:${vs_core_version}")
    compileOnly("org.valkyrienskies.core:impl:${vs_core_version}")

    // runtimeOnly("libs:valkyrienskies-1201:2.1.3")

    // implementation fg.deobf("libs:valkyrienskies-1201:2.5.0")
    // implementation fg.deobf("org.valkyrienskies.core:api:${vs2_core_version}")

    // implementation fg.deobf("libs:embeddium-1201:0.3.31")

    implementation fg.deobf("libs:spark-1.10.53:forge")

    implementation "com.fasterxml.jackson.core:jackson-annotations:2.13.3"
    implementation "thedarkcolour:kotlinforforge:$forge_kotlin_version"

    implementation fg.deobf(jarJar("libs:tau:2.0.1")){
        jarJar.ranged(it, "[2.0.1,)")
    }

    implementation fg.deobf("libs:cbcmodernwarfare:0.0.6c")
    implementation fg.deobf("libs:createbigcannons:5.8.3")

    // minecraftLibrary("org.jgrapht:jgrapht-core:1.5.2")
    implementation fg.deobf("libs:valkyrien-ship-schematics-forge:1.0")
    // implementation fg.deobf("libs:VMod-Forge-1.20.1:1.0.0")

    implementation fg.deobf("com.rbasamoyai:ritchiesprojectilelib:${rpl_version}+mc.${minecraft_version}-forge-build." + rpl_build){ transitive = false }


    implementation("org.joml:joml:1.10.4") { transitive = false }
    implementation("org.joml:joml-primitives:1.10.0") { transitive = false }

    // cc:t dependencies
    implementation fg.deobf("curse.maven:cc-tweaked-282001:5379173")
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
        jarJar.ranged(it, "[0.4.1,)")
    }
    implementation fg.deobf("maven.modrinth:sodium:mc1.20.1-0.5.11")

    compileOnly(annotationProcessor("com.bawnorton.mixinsquared:mixinsquared-common:0.2.0-beta.6"))
    implementation(jarJar("com.bawnorton.mixinsquared:mixinsquared-forge:0.2.0-beta.6")) {
        jarJar.ranged(it, "[0.2.0-beta.6,)")
    }
    implementation fg.deobf("curse.maven:create-tweaked-controllers-898849:5206625")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

shadowJar {
    exclude "fabric.mod.json"
    mergeServiceFiles()
    configurations = [project.configurations.shadowInclude]
    archiveClassifier.set('')
    relocate("gg.essential.elementa", "com.verr1.elementa")
    relocate("gg.essential.universal", "com.verr1.universal")
}
jar.enabled = false
tasks.named("jar") { dependsOn(shadowJar) }
afterEvaluate {
    tasks.findByName("reobfJar")?.configure {
        dependsOn(shadowJar)
    }
}


tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}



publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
